#include "UnityCG.cginc"

int BlurSamples;
int BlurDirection;

float2 SourceTextureResolution;

Texture2D<float4> Read_SourceTexture_Pass1;
Texture2D<float4> Read_SourceTexture_Pass2;

RWTexture2D<float4> Write_SourceTexture_Pass1;
RWTexture2D<float4> Write_SourceTexture_Pass2;

SamplerState _PointClamp;
SamplerState _LinearClamp;

float4 TEX2D(Texture2D<float4> tex, float2 uv)
{
    return tex.SampleLevel(_LinearClamp, uv, 0);
}

float4 blur(Texture2D<float4> tex, float2 uv)
{
    float2 scale = float2(1, 1) / SourceTextureResolution.xy;
    float2 offset = float2(0, 0);
    float4 col = float4(0, 0, 0, 0);
    float accum = 0.0;

    for (int i = -(BlurSamples / 2); i <= BlurSamples / 2; ++i)
    {
        if (BlurDirection == 0)
            offset = float2(i, 0);
        else
            offset = float2(0, i);

        col += tex.SampleLevel(_LinearClamp, uv + scale * offset, 0);

        accum += 1;
    }

    return col / accum;
}

#pragma kernel BoxBlur_Pass1
[numthreads(1,1,1)]
void BoxBlur_Pass1(uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy + float2(0.5, 0.5);
    uv /= SourceTextureResolution.xy;

    BlurDirection = 0;
    float4 originalColor = blur(Read_SourceTexture_Pass1, uv);

    //Color Space Correction
    //originalColor = float4(LinearToGammaSpace(originalColor), originalColor.a);
    Write_SourceTexture_Pass1[id.xy] = originalColor;
}

#pragma kernel BoxBlur_Pass2
[numthreads(1, 1, 1)]
void BoxBlur_Pass2(uint3 id : SV_DispatchThreadID)
{
    float2 uv = id.xy + float2(0.5, 0.5);
    uv /= SourceTextureResolution.xy;

    BlurDirection = 1;
    float4 originalColor = blur(Read_SourceTexture_Pass2, uv);

    //Color Space Correction
    originalColor = float4(LinearToGammaSpace(originalColor), originalColor.a);
    Write_SourceTexture_Pass2[id.xy] = originalColor;
}
